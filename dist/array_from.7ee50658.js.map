{"version":3,"sources":["src/array_from.js"],"names":["console","log","Array","from","x","set1","Set","map1","Map","mapper1","values","keys","f1","arguments","length","v","i","range","start","stop","step","_","charCodeAt","map","String","fromCharCode"],"mappings":"AAAC;AACD;AACA;AACAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAW,KAAX,CAAZ,GAAgC;;AAChCH,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX,EAAsB,UAAAC,CAAC;AAAA,SAAIA,CAAC,GAAGA,CAAR;AAAA,CAAvB,CAAZ,GAAgD;;AAChDJ,OAAO,CAACC,GAAR,CAAY,EAAZ,GAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;;AACAD,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAW,KAAX,CAAZ,GAAgC;AAEhC;;AACA,IAAME,IAAI,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAR,CAAb;AACAN,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWE,IAAX,CAAZ,GAA+B;AAE/B;;AACA,IAAME,IAAI,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAR,CAAb;AACAR,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWI,IAAX,CAAZ,GAA+B;;AAE/B,IAAME,OAAO,GAAG,IAAID,GAAJ,CAAQ,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,CAAC,GAAD,EAAM,GAAN,CAAb,CAAR,CAAhB;AACAR,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWM,OAAO,CAACC,MAAR,EAAX,CAAZ,GAA2C;;AAC3CV,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWM,OAAO,CAACE,IAAR,EAAX,CAAZ,GAAyC;AAEzC;;AACA,SAASC,EAAT,GAAc;AACZ,SAAOV,KAAK,CAACC,IAAN,CAAWU,SAAX,CAAP;AACD;;AACDb,OAAO,CAACC,GAAR,CAAYW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd,GAA0B;AAE1B;AACA;;AACAZ,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX,EAAsB,UAAAC,CAAC;AAAA,SAAIA,CAAC,GAAG,CAAR;AAAA,CAAvB,CAAZ,GAAgD;AAEhD;AACA;AACA;;AACAJ,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAW;AAAEW,EAAAA,MAAM,EAAE;AAAV,CAAX,EAA0B,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUA,CAAV;AAAA,CAA1B,CAAZ,GAAqD;AAErD;AACA;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,IAAR,EAAcC,IAAd;AAAA,SACZlB,KAAK,CAACC,IAAN,CAAW;AAAEW,IAAAA,MAAM,EAAE,CAACK,IAAI,GAAGD,KAAR,IAAiBE,IAAjB,GAAwB;AAAlC,GAAX,EAAkD,UAACC,CAAD,EAAIL,CAAJ;AAAA,WAAUE,KAAK,GAAGF,CAAC,GAAGI,IAAtB;AAAA,GAAlD,CADY;AAAA,CAAd,EAGA;;;AACApB,OAAO,CAACC,GAAR,CAAYgB,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,GAA6B;AAE7B;;AACAjB,OAAO,CAACC,GAAR,CAAYgB,KAAK,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,CAAjB,GAA8B;AAE9B;;AACAjB,OAAO,CAACC,GAAR,CACEgB,KAAK,CAAC,IAAIK,UAAJ,CAAe,CAAf,CAAD,EAAoB,IAAIA,UAAJ,CAAe,CAAf,CAApB,EAAuC,CAAvC,CAAL,CAA+CC,GAA/C,CAAmD,UAAAnB,CAAC;AAAA,SAClDoB,MAAM,CAACC,YAAP,CAAoBrB,CAApB,CADkD;AAAA,CAApD,CADF,GAKA;;AAEAJ,OAAO,CAACC,GAAR,CAAY,EAAZ","file":"array_from.7ee50658.js","sourceRoot":"..","sourcesContent":["﻿// https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n// Array.from()\n// Array.from()メソッドは、★配列風オブジェクトや反復可能オブジェクトから、新しい、浅いコピーの Arrayインスタンスを生成します。\nconsole.log(Array.from(\"foo\")); // [\"f\", \"o\", \"o\"]\nconsole.log(Array.from([1, 2, 3], x => x + x)); // [2, 4, 6]\nconsole.log(\"\");\n\n// ■ Syntax\n// Array.from(arrayLike[, mapFn[, thisArg]])\n\n// □ 引数\n// ・arrayLike ... 配列に変換する配列風オブジェクト又は反復可能オブジェクト、関数内で{}で生成する場合も（すぐmap()適用）\n// ・mapFn() ... 配列の全ての要素に対して呼び出されるMap関数\n// ・thisArg ... mapFn()を実行する時にthisとして使用される値\n\n// □ 返り値\n// ”新しい”arrayインスタンス\n\n// ■ 説明\n// Array.from() は、以下のものからArrayを生成します。\n// ・配列風オブジェクト (length プロパティおよびインデックス付けされた要素を持つオブジェクト) もしくは\n// ・反復可能オブジェクト (Map や Set のような要素を取得するオブジェクト)\n\n// Array.from() は任意の引数 mapFn()を持ちます。これは、作成した配列 (もしくは、サブクラスオブジェクト) のすべての要素に対して\n// map関数を実行出来ます。より明確に言うと、中間配列を生成しない事を除いて、Array.from(obj, mapFn, thisArg) は\n// Array.from(obj).map(mapFn, thisArg) と同じ結果です。\n// 中間配列は、適切な型に合うように丸められた値を持つ必要があるため、typed arrays(型付き配列、Int8Array等)のような配列サブクラスにとっては特に重要です。\n\n// from() メソッドの length プロパティは 1 です。\n\n// ES2015 では、class構文により定義済みクラスとユーザー定義クラスの両方をサブクラス化する事が出来ます。\n// 結果として、Array.fromのような静的メソッドは Array のサブクラスに「継承」され、Array ではなくサブクラスのインスタンスを生成します。\n\n// ■ 例\n\n// □ String からの配列の生成\nconsole.log(Array.from(\"ABC\")); // [\"A\", \"B\", \"C\"]\n\n// □ Set からの配列の生成\nconst set1 = new Set([\"foo\", \"bar\", \"baz\", \"foo\"]);\nconsole.log(Array.from(set1)); // [\"foo\", \"bar\", \"baz\"]\n\n// □ Map からの配列の生成\nconst map1 = new Map([[1, 2], [2, 4], [4, 8]]);\nconsole.log(Array.from(map1)); // [ [1, 2], [2, 4], [4, 8] ]\n\nconst mapper1 = new Map([[\"1\", \"a\"], [\"2\", \"b\"]]);\nconsole.log(Array.from(mapper1.values())); // [\"a\", \"b\"]\nconsole.log(Array.from(mapper1.keys())); // [\"1\", \"2\"]\n\n// □ 配列風オブジェクト (引数) からの配列の生成\nfunction f1() {\n  return Array.from(arguments);\n}\nconsole.log(f1(1, 2, 3)); // [1, 2, 3]\n\n// □ アロー関数と Array.from の使用\n// 要素を操作するためにマップ関数として、アロー関数を使用\nconsole.log(Array.from([1, 3, 5], x => x * 2)); // [2, 6, 10]\n\n// 連番の生成\n// 配列のそれぞれの場所が、\"undefined\"で初期化されるため、以下の\"v\"の値は\"undefined\"になる\n// ★配列長さx5 → undefined埋め → map(currentValue, index)でundefinedにindex番号を上書き\nconsole.log(Array.from({ length: 5 }, (v, i) => i)); // [0, 1, 2, 3, 4]\n\n// □ 連番の生成 (範囲指定)\n// ★連番の生成関数（ClojureやPHP等でよくrange()と呼ばれるカスタム関数）\nconst range = (start, stop, step) =>\n  Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step);\n\n// 0～4の範囲の数値を生成\nconsole.log(range(0, 4, 1)); // [0, 1, 2, 3, 4]\n\n// 1～10の範囲の数値を、2毎に生成\nconsole.log(range(1, 10, 2)); // [1, 3, 5, 7, 9]\n\n// Array.from()を使用して、順番通りになるようアルファベットを生成\nconsole.log(\n  range(\"A\".charCodeAt(0), \"Z\".charCodeAt(0), 1).map(x =>\n    String.fromCharCode(x)\n  )\n);\n// (26) [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n\nconsole.log(\"\");\n"]}