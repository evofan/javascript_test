{"version":3,"sources":["src/array_fill.js"],"names":["array1","console","log","fill","NaN","Array","call","length"],"mappings":"AAAC;AACD;AACA;AACA,IAAIA,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAb;AACAC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAZ,GAAmC;;AACnCF,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAZ,GAAgC;;AAChCF,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAP,CAAY,CAAZ,CAAZ,GAA6B;AAE7B;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,CAAZ,GAAgC;;AAChCF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkB,CAAlB,CAAZ,GAAmC;;AACnCF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAZ,GAAsC;;AACtCF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAZ,GAAsC;;AACtCF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAZ,GAAsC;;AACtCF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAC,CAAvB,CAAZ,GAAwC;;AACxCF,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkBC,GAAlB,EAAuBA,GAAvB,CAAZ,GAA0C;;AAC1CH,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAZ,GAAsC;;AACtCF,OAAO,CAACC,GAAR,CAAYG,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,CAAc,CAAd,CAAZ,GAA+B;;AAC/BF,OAAO,CAACC,GAAR,CAAY,GAAGC,IAAH,CAAQG,IAAR,CAAa;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAb,EAA4B,CAA5B,CAAZ,GAA6C;;AAC7CN,OAAO,CAACC,GAAR,CAAY,EAAZ","file":"array_fill.03c6f375.js","sourceRoot":"..","sourcesContent":["﻿// https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\n// Array.prototype.fill()\n// fill()メソッドは、配列中の開始位置から終了位置までの要素を固定値で設定します。その際、終了位置は含まれません。\nlet array1 = [1, 2, 3, 4];\nconsole.log(array1.fill(0, 2, 4)); // [1, 2, 0, 0]、※位置2から位置4まで0で埋めます\nconsole.log(array1.fill(5, 1)); // [1, 5, 5, 5]、※位置1から5を埋める\nconsole.log(array1.fill(6)); // [6, 6, 6, 6]\n\n// ■ Syntax\n// array.fill(value[, start[, end]]);\n\n// □ 引数\n// ・value ... 配列に設定する値\n// ・start ... 開始する位置、既定値は0\n// ・end ... 終了する位置、既定値はthis.length\n\n// □ 返り値\n// 変更された配列（元の配列を変更）\n\n// ■ 説明\n// fillメソッドは最大3つの引数 value、start、end を取ります。startとendはオプションの引数で、既定値はそれぞれ0とthisオブジェクトのlengthです。\n//\n// startが負の値の場合、length + startとして扱われます(lengthは配列の長さ)。endが負の値の場合、length + endとして扱われます。\n//\n// fill()関数はジェネリック関数であり、thisが配列オブジェクトである必要はありません。\n//\n// https://ufcpp.net/study/csharp/sp2_generics.html\n// ジェネリック※（generics：総称性）、 あるいは、総称的プログラミング（generic programming）とも呼ばれますが、\n// この機能は、 さまざまな型に対応するために、型をパラメータとして与えて、その型に対応したクラスや関数を生成するもの機能です。\n//\n// fillメソッドは可変メソッドで、thisオブジェクト自身を変更し、オブジェクト自身のコピーではなく、オブジェクト自身を返します。\n//\n// fillにオブジェクトを渡した場合、そのオブジェクトへの参照がコピーされ、配列に参照が書き込まれます。\n\n// ■ 例\nconsole.log([1, 2, 3].fill(4)); // 4, 4, 4、OK\nconsole.log([1, 2, 3].fill(4, 1)); // 1, 4, 4、OK\nconsole.log([1, 2, 3].fill(4, 1, 2)); // 1, 4, 4 → 1, 4, 3、※★＞その際、終了位置は含まれません。なので\nconsole.log([1, 2, 3].fill(4, 1, 1)); // 1, 4, 3 → 1, 2, 3、※★＞その際、終了位置は含まれません。←開始位置の指定より優先する\nconsole.log([1, 2, 3].fill(4, 3, 3)); // 1, 2, 3\nconsole.log([1, 2, 3].fill(4, -3, -2)); // 4, 2, 3\nconsole.log([1, 2, 3].fill(4, NaN, NaN)); // 4, 4, 4 → 1, 2, 3、※数字以外で指定した時は無効\nconsole.log([1, 2, 3].fill(4, 3, 5)); // 1, 2, 3\nconsole.log(Array(3).fill(4)); // 4, 4, 4\nconsole.log([].fill.call({ length: 3 }, 4)); // 4,4,4 → { 0: 4, 1: 4, 2: 4, length: 3 }\nconsole.log(\"\");\n"]}