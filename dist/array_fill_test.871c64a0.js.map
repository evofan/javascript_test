{"version":3,"sources":["src/array_fill_test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAC,OAAO,CAAC,GAAR,CAAY,qBAAZ,GAED;;AACA,IAAM,KAAK,GAAW,EAAtB;AACA,IAAM,KAAK,GAAW,KAAtB;AACA,IAAM,MAAM,GAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvC;AACA,MAAM,CAAC,IAAP,CAAY,KAAZ;AAEA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,MAAxB,GAAiC;AAEjC;;AACA,IAAM,MAAM,GAAa,IAAI,KAAJ,CAAkB,KAAlB,CAAzB;AACA,IAAM,KAAK,GAAW,KAAtB;AACA,IAAI,OAAO,GAAG,MAAM,CAAC,MAArB;;AACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,EAAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAZ;AACD;;AACD,OAAO,CAAC,GAAR,CAAY,MAAZ,GAAqB;AAErB;;AACA,IAAM,MAAM,GAAU,IAAI,KAAJ,CAA2B,KAA3B,EACnB,IADmB,CACd,IADc,EAEnB,GAFmB,CAEf,UAAA,GAAA,EAAG;AAAI,SAAA,KAAA;AAAK,CAFG,CAAtB;AAGA,OAAO,CAAC,GAAR,CAAY,MAAZ,GAAqB;AAErB;;AACA,IAAM,MAAM,GAAU,IAAI,KAAJ,CAA2B,KAA3B,EACnB,IADmB,CACd,IADc,EAEnB,GAFmB,CAEf,UAAC,GAAD,EAAM,GAAN,EAAS;AAAK,SAAA,CAAC,GAAD,EAAM,KAAN,CAAA;AAAY,CAFX,CAAtB;AAGA,OAAO,CAAC,GAAR,CAAY,MAAZ,GAAqB;AAErB;;AACA,IAAM,OAAO,GAAW,EAAxB;AACA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAA,GAAA,EAAG;AAAI,SAAC,OAAO,CAAC,GAAD,CAAP,GAAe,MAAM,CAAC,GAAD,CAAtB;AAA4B,CAA/D;AACA,OAAO,CAAC,GAAR,CAAY,OAAZ,GAAsB;AAEtB;;AACA,IAAI,QAAQ,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAAf;AACA,IAAI,OAAO,GAAW,EAAtB;AACA,OAAO,GAAG,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,UAAA,CAAA,EAAC;AAAI,SAAC,OAAO,CAAC,CAAD,CAAP,GAAgB,CAAC,CAAC,WAAF,KAAe,QAAhC;AAAoC,CAA9D,CAAV;AACA,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAyB,OAAzB,GAAmC;AAEnC;;AACA,IAAI,YAAY,GAAQ,EAAxB;AACA,IAAI,OAAO,GAAQ,MAAM,CAAC,MAAP,CAAc,UAAC,WAAD,EAAc,YAAd,EAA4B,GAA5B,EAA+B;SAAA,CAC9D;AACA;AACA;;;AACA,SAAA,QAAA,CAAA,EAAA,EAAY,MAAZ,GAAkB,EAAA,GAAA,EAAA,EAAA,EAAA,CAAG,GAAH,CAAA,GAAS,YAAT,EAAqB,EAAvC,EAAA;AACD,CALkB,EAKhB,YALgB,CAAnB;AAMA,OAAO,CAAC,GAAR,CAAY,OAAZ,GAAsB;;AACtB,OAAO,CAAC,GAAR,CAAY,EAAZ","file":"array_fill_test.871c64a0.js","sourceRoot":"..","sourcesContent":["﻿console.log(\"【Array.fill() test】\");\n\n// Array.prototype.fill()を使ったコード\nconst leng2: number = 10;\nconst elem2: string = \"Cat\";\nconst array2: Array<string | number> = [0, 1, 2, 3];\narray2.fill(elem2);\n\nconsole.log(\"array2: \", array2); // [\"Cat\", \"Cat\", \"Cat\", \"Cat\"]\n\n// fill()を使わないでforを使った場合\nconst array3: string[] = new Array<string>(leng2);\nconst elem3: string = \"Cat\";\nlet length3 = array3.length;\nfor (let i = 0; i < length3; i++) {\n  array3[i] = elem3;\n}\nconsole.log(array3); //  [\"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\"]\n\n// map()を使った方法\nconst array4: any[] = new Array<string | number>(leng2)\n  .fill(null)\n  .map(idx => elem3);\nconsole.log(array4); // [\"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\", \"Cat\"]\n\n// map()を使った方法、番号付き配列に\nconst array5: any[] = new Array<string | number>(leng2)\n  .fill(null)\n  .map((key, idx) => [idx, elem3]);\nconsole.log(array5); // [0, \"Cat\"], [1, \"Cat\"], [2, \"Cat\"], [3, \"Cat\"], [4, \"Cat\"], [5, \"Cat\"], [6, \"Cat\"], [7, \"Cat\"], [8, \"Cat\"], [9, \"Cat\"]\n\n// 配列 → インデックス番号付きオブジェクトへ\nconst Object6: object = {};\nObject.keys(array4).forEach(key => (Object6[key] = array4[key]));\nconsole.log(Object6); // {0: \"Cat\", 1: \"Cat\", 2: \"Cat\", 3: \"Cat\", 4: \"Cat\", 5: \"Cat\", 6: \"Cat\", 7: \"Cat\", 8: \"Cat\", 9: \"Cat\"}\n\n// from()を使う\nlet cats_ary = [\"Mike\", \"Kuro\", \"Shiro\"];\nlet Object7: object = {};\nObject7 = Array.from(cats_ary, x => (Object7[x] = `${x.toLowerCase()}猫`));\nconsole.log(\"Object8: \", Object7); // [\"mike猫\", \"kuro猫\", \"shiro猫\"]\n\n// 配列からインデックス番号付きオブジェクトへ（reduce使用版）\nlet initialValue: any = {};\nlet Object8: any = array4.reduce((accumulator, currentValue, idx) => {\n  // console.log(accumulator);\n  // console.log(currentValue);\n  // console.log(idx);\n  return { ...array4, [idx]: currentValue };\n}, initialValue);\nconsole.log(Object8); // {0: \"Cat\", 1: \"Cat\", 2: \"Cat\", 3: \"Cat\", 4: \"Cat\", 5: \"Cat\", 6: \"Cat\", 7: \"Cat\", 8: \"Cat\", 9: \"Cat\"}\nconsole.log(\"\");\n"]}